version: '3.8'

services:
  mongodb:
    image: mongo:8.0
    container_name: sistemplate-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=sistemplate
    volumes:
      - mongodb_data:/data/db
    networks:
      - sistemplate-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: sistemplate-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/opt/zookeeper-3.4.6/data
    networks:
      - sistemplate-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: wurstmeister/kafka:2.13-2.8.0
    container_name: sistemplate-kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_COMPRESSION_TYPE: snappy
      # JVM Settings
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      KAFKA_JVM_PERFORMANCE_OPTS: "-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35"
    volumes:
      - kafka_data:/kafka
    depends_on:
      - zookeeper
    networks:
      - sistemplate-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  sistemplate-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: sistemplate-app
    ports:
      - "8080:8080"
      - "8081:8081"  # Management port
    environment:
      # Database
      - QUARKUS_MONGODB_CONNECTION_STRING=mongodb://mongodb:27017
      - QUARKUS_MONGODB_DATABASE=sistemplate
      
      # Kafka
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9093
      - KAFKA_TOPIC_DOCUMENT_GENERATION=document-generation
      - KAFKA_TOPIC_DOCUMENT_GENERATION_DLQ=document-generation-dlq
      
      # Consumer settings
      - KAFKA_CONSUMER_GROUP_ID=sistemplate-document-consumer
      - KAFKA_CONSUMER_THREADS=2
      - KAFKA_CONSUMER_MAX_POLL_RECORDS=50
      
      # Producer settings
      - KAFKA_PRODUCER_RETRIES=2147483647
      - KAFKA_PRODUCER_DELIVERY_TIMEOUT_MS=120000
      
      # Callback settings
      - CALLBACK_TIMEOUT_SECONDS=60
      - CALLBACK_RETRY_ATTEMPTS=3
      
      # JVM Settings
      - JAVA_OPTS=-Xmx512m -Xms256m -XX:+UseG1GC
      
      # Logging
      - QUARKUS_LOG_LEVEL=INFO
      - QUARKUS_LOG_CATEGORY_PT_AMA_LEVEL=DEBUG
      
      # Management
      - QUARKUS_MANAGEMENT_ENABLED=true
      - QUARKUS_MANAGEMENT_PORT=8081
      
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - sistemplate-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/q/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: sistemplate-kafka-ui
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: sistemplate-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - sistemplate-network
    restart: unless-stopped

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sistemplate-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sistemplate-network
    restart: unless-stopped

networks:
  sistemplate-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  prometheus_data:
    driver: local